// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  name      String?
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt

  habits    HabitsOnUsers[]
  role UserRole[]
}

model Habit {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  users       HabitsOnUsers[]
  habitDetail HabitDetail[]
}

model HabitDetail {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  habitDate   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  idHabit     Int

  habit   Habit @relation(fields: [idHabit], references: [id])
}


model HabitsOnUsers {
  idHabit     Int 
  idUser      Int
  assignedAt  DateTime @default(now())
  assignedBy  String?

  habit Habit @relation(fields: [idHabit], references: [id])
  user  User  @relation(fields: [idUser], references: [id])

  @@id([idHabit, idUser])
}


model Role {
  id          Int       @id @unique @default(autoincrement())
  name        String
  description String?
  CreatedAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  users UserRole[]
}

model UserRole {
  idUser      Int @unique // primera fase solo 1 rol por usuario.
  idRole      Int 
  assignedAt  DateTime @default(now())
  assignedBy  String

  user   User @relation(fields: [idUser], references: [id])
  role   Role @relation(fields: [idRole], references: [id])

  @@id([idUser, idRole])
}